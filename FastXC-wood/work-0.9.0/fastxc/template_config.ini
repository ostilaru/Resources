; The SeisArray_1 contains the path, pattern, time , component, and station list path for the first SeisArray
[SeisArray_1]
; The path of the SeisArray
sac_dir = /PATH/TO/YOUR/SeisArray_1
; The pattern of the SeisArray. e.g. {home}/{*}/{station}.{YYYY}.{JJJ}.{HH}{MI}.{component}.{suffix}
pattern = PATTERN_OF_YOUR_SeisArray_1
; The start time of the SeisArray
start = YYYY-MM-DD HH:MM:SS
end = YYYY-MM-DD HH:MM:SS
; The path to your station_list. If you do not have a station_list, set sta_list_path to NONE (capitalize)
sta_list = NONE
; The component_list of the SeisArray, !! Should be in the order of E,N,Z IF MULTI !!
component_list = E,N,Z


; The SeisArray_2, If single array is used, set sac_dir to NONE (capitalize)
[SeisArray_2]
; The path of the SeisArray, set to NONE if single array
sac_dir = /PATH/TO/YOUR/SeisArray_2
; The pattern of the SeisArray,e.g. {home}/{*}/{station}.{YYYY}.{JJJ}.{HH}{MI}.{component}.sac
pattern = PATTERN_OF_YOUR_SeisArray_2
; The time period of the SeisArray, strongly recommend the time period of the Array_2 is the same as the Array_1
start = YYYY-MM-DD HH:MM:SS
end = YYYY-MM-DD HH:MM:SS
; The path to your station_list, If you do not have a station_list, set sta_list_path to NONE (capitalize)
sta_list = NONE
; The component_list of the SeisArray, !! Should be in the order of E,N,Z !!
component_list = E,N,Z


; Parameters for doing the cross-correlation
[Parameters]
; output directory of the cross-correlation
output_dir = /PATH/TO/YOUR/OUTPUT
; The length of the segment (seconds)
win_len = 7200
; The whiten type of the cross-correlation, BEFORE, AFTER, BOTH or OFF, AFTER is recommended
whiten = AFTER
; The normalization type of the cross-correlation, RUN-ABS, ONE-BIT or OFF
normalize = RUN-ABS
; The bands of whiten and normalization, format is 0.2/0.5 0.5/2 2/4 (Hz)
bands = 0.2/0.5 0.5/2 2/4 
; The maximum time lag of the cross-correlation (seconds)
max_lag = 50
; whether do cross-correlation or only auto-correlation, True or False, Only work for one array condition
do_xc = True
; If skip some steps of segment in continuous wave, usually do not set (Just Leave it -1)
skip_step = -1
; stacking normalization
stack_norm = True
; If have two arrays
dual_array = False


; Path for YOUR Tool name
[Command]
sac2spec_c1 = /path/to/sac2spec_c1
sac2spec_c9 = /path/to/sac2spec_c1
xc_mono = /path/to/sac2spec_c1
xc_dual = /path/to/sac2spec_c1
stack = /path/to/sac2spec_c1
rotate = /path/to/sac2spec_c1


; Information of memory, gpu_list, gpu_task_num, gpu_mem_info should have the same length
[mem_info]
; number of points in one sac file
npts = 864000
; delta of sac file (seconds)
delta = 10
; length of segment file (seconds)
seg_len = 7200
; gpu list which will be used in computing
gpu_list = 0
; tasks deploy on each gpu for the cross-correlation step
gpu_task_num = 1
; gpu mem info : used to allocate tasks in the sac2spec step (only the ratio message is used )
; and to calculate the max num of spectrum in step 2
; Using nvidia-smi to find such information
gpu_mem_info = 30
; cpu mem info use free -h to get the information
cpu_mem_info = 200
; redundant ratio of the memory
redundant_ratio = 0.8

; executing params
[executing]
; set to NONE to do auto-correlation, usually not change (set as True)
do_xc = True
; process in parallel (CPU Part) or not
parallel = True
; print command or not, usually not change (set as False)
debug = False
; number of threads for parallel computing in CPU part
threads = 10
